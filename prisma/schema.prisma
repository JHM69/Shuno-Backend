// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}


// type enum for content type music, podcast, audiobook, poem, paper

enum ContentType {
  MUSIC
  PODCAST
  AUDIOBOOK
  POEM
  PAPER
}
 

model Article {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String
  description String
  body        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  tagList     Tag[]
  addedBy     User             @relation("added",fields: [userId], references: [id])
  userId    Int
  favorites   User[]          @relation("UserFavorites")
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  body      String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[]
}


model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String    @unique
  password   String
  image      String?   @default("http://54.80.47.120:5001/logo.png")
  bio        String?
  articles   Article[]   @relation("added")
  favorites  Article[]   @relation("UserFavorites")
  followedBy User[] @relation("UserFollows")
  following User[] @relation("UserFollows")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  comments   Comment[]
  songs      Song[]     @relation("addedSongs")
  playlists  Playlist[] @relation("addedPlaylists")
  albums     Album[]    @relation("addedAlbums")
  artists    Artist[]   @relation("addedArtists")
  likedSongs Song[]     @relation("UserLikes")
  followingArtists Artist[] @relation("UserFollows")
}


model Artist {
  slug             String   @unique
  id               Int      @id @default(autoincrement())
  name             String
  creatorType      ContentType @default(MUSIC)
  songs            Song[]    @relation("ArtistSongs") 
  primaryImage     String?   @default("http://54.80.47.120:5001/logo.png")
  followerCount    Int?      @default(0)
  fanCount         Int?      @default(0)
  isVerified       Boolean?  @default(false)
  dominantLanguage String?   @default("en")
  dominantType     String?   @default("singer")
  bio              String?   @default("This is a bio")
  dob              String?   @default("2021-01-01")
  fb               String?   @default("https://www.facebook.com/")
  twitter          String?   @default("https://twitter.com/home")
  wiki             String?   @default("https://en.wikipedia.org/wiki/Main_Page")
  availableLanguages String? @default("en")
  isRadioPresent   Boolean?  @default(false)
  isBand           Boolean?  @default(false)
  bandMembers      Artist[]  @relation("BandMembers")
  bandMemberOf     Artist[]  @relation("BandMembers")
  primaryAlbums    Album[]   @relation("PrimaryArtists") 
  featuredAlbums   Album[]   @relation("FeaturedArtists") 
  featuredSongs    Song[]    @relation("FeaturedArtistsSong") 
  images           Image[]   @relation("ArtistImages")
  albums           Album[]   @relation("ArtistAlbums")  
  playlists        Playlist[] @relation("PlaylistArtists")
  addedBy     User             @relation("addedArtists",fields: [userId], references: [id])
  userId    Int         @default(1)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  genres      Genre[]   @relation("ArtistGenres")
  followers User[] @relation("UserFollows")
  @@index([name])
}

model Album {
  slug            String   @unique
  id           Int      @id @default(autoincrement())
  name        String
  releaseYear  String?
  songs        Song[]
  coverImage   String?
  contentType  ContentType 
  duration     Int?
  price        Int?
  mainArtist   Artist?  @relation("ArtistAlbums",fields: [mainArtistSlug], references: [slug])
  mainArtistSlug String?
  genres      Genre[] @relation("AlbumGenres")
  currency     String?
  primaryArtists    Artist[] @relation("PrimaryArtists") 
  featuredArtists   Artist[] @relation("FeaturedArtists")
  label        String?
  image        Image[]  @relation("AlbumImages")
  language     String?
  origin       String? 
  mediaPreviewUrl String? 
  likes        Int
  plays        Int
  isPremium    Boolean
  disabled     Boolean
  disabledText String? 
  releaseDate  DateTime? @default(now())  
  trillerAvailable Boolean  
  trillerUrl   String?
  addedBy      User             @relation("addedAlbums",fields: [userId], references: [id])
  userId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Playlist {
  slug         String   @unique
  name         String
  id           Int      @id @default(autoincrement())  
  primaryImage String?
  username     String 
  type         String?
  year         String?
  subtitle     String?
  language     String?
  duration     Int?
  images       Image[]  @relation("PlaylistImages")
  url          String
  artists     Artist[] @relation("PlaylistArtists")
  songs        Song[]  @relation("PlaylistSongs") 
  genres       Genre[] @relation("PlaylistGenres")
  addedBy      User             @relation("addedPlaylists",fields: [userId], references: [id])
  userId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Genre {
  id   Int    @id @default(autoincrement())
  slug String @unique
  name String
  songs Song[] @relation("SongGenres")
  artists Artist[] @relation("ArtistGenres")
  playlists Playlist[] @relation("PlaylistGenres")
  albums Album[] @relation("AlbumGenres")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Song {
  slug            String   @unique
  id              Int      @id @default(autoincrement())
  name            String
  album           Album    @relation(fields: [albumId], references: [id])
  albumId         Int
  year            String?
  releaseDate     DateTime?  @default(now())
  duration        Int?
  label           String?
  tags            String?    
  mood            String?
  primaryArtists  Artist[] @relation("ArtistSongs") 
  featuredArtists Artist[] @relation("FeaturedArtistsSong") 
  explicitContent Int?
  playCount       Int?
  language        String?
  hasLyrics       Boolean  @default(false)
  url             String   
  copyright       String?
  contentType     ContentType
  images          Image[]  @relation("SongImages")
  primaryImage    String?
  downloadUrls    SongDownloadUrl[] @relation("SongDownloadUrls")
  origin             String?
  lyricsSnippet      String?   @db.Text
  encryptedMediaUrl  String?
  encryptedMediaPath String?
  mediaPreviewUrl    String?
  permaUrl           String?
  albumUrl           String?
  rightId            Int?
  kbps320            Boolean?
  isDolbyContent     Boolean?
  disabled           String?
  disabledText       String?
  cacheState         String?
  vcode              String?
  trillerAvailable   Boolean
  labelUrl           String?
  playLists          Playlist[] @relation("PlaylistSongs")
  addedBy     User   @relation("addedSongs",fields: [userId], references: [id])
  userId      Int
  genres      Genre[]   @relation("SongGenres")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  likeds     User[] @relation("UserLikes")
  vector  Unsupported("vector")?
  content String?   @db.Text
  @@index([name], name: "name") 
}

model Image {
  id      Int      @id @default(autoincrement())
  quality String   @default("hd")
  link    String?
  artist  Artist?  @relation("ArtistImages", fields: [artistId], references: [id])
  artistId Int?    
  album   Album?   @relation("AlbumImages", fields: [albumId], references: [id])
  albumId Int?
  playlist Playlist? @relation("PlaylistImages", fields: [playlistId], references: [id])
  playlistId Int?
  song    Song?    @relation("SongImages", fields: [songId], references: [id])
  songId  Int?
}

model SongDownloadUrl {
  id       Int      @id @default(autoincrement())
  quality  String?
  link     String?
  song     Song     @relation("SongDownloadUrls",fields: [songId], references: [id])
  songId   Int
}